[
  {
    "formName": "General",
    "key": "general",
    "description": "Schema for Js Agent",
    "fields": [
      {
        "key": "beacon_url",
        "value": "",
        "label": "Beacon URL",
        "controlType": "input",
        "type": "text",
        "colspan": 12,
        "description": "URL responsible for capturing NV information",
        "seq": 0,
        "validators": {
          "required": true,
          "pattern": "^(?:http(s)?:\\\/\\\/)?[\\\/\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:\/\/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$"
        }
      },
      {
        "key": "site_domain",
        "value": "",
        "colspan": 6,
        "label": "Site Domain",
        "description": "ex to fill values are -- domain.com, example.domain.com, example.domain-hyphen.com, www.domain.com",
        "controlType": "input",
        "type": "text",
        "seq": 1,
        "validators": {
          "required": false,
          "pattern": "^(?!:\\\/\\\/)([a-zA-Z0-9-_]+\\.)*[a-zA-Z0-9][a-zA-Z0-9-_]+\\.[a-zA-Z]{2,11}?$"
        }
      },
      {
        "key": "user_ip",
        "value": "",
        "colspan": 3,
        "description": "ex to fill values are --192.168.1.1, 182.165.1.1 ",
        "label": "User IP",
        "controlType": "input",
        "type": "text",
        "seq": 1,
        "validators": {
          "required": false,
          "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
        }
      },
      {
        "key": "enableWorker",
        "value": true,
        "colspan": 3,
        "label": "EnableWorker",
        "controlType": "toggle",
        "description": "A web worker is a JavaScript that runs in the background, independently of other scripts, without affecting the performance of the page",
        "type": "boolean",
        "seq": 1
      },
      {
        "key": "enableCvrAllPages",
        "value": true,
        "colspan": 3,
        "label": "EnableCvrAllPages",
        "controlType": "toggle",
        "description": "In this we don't wait for page to be ready rather we send timing once the library initiates.",
        "type": "boolean",
        "seq": 1
      },
      {
        "key": "log_level",
        "value": 3,
        "colspan": 3,
        "label": "Log Level",
        "description": "It denotes the level of logs. few are the important logs which we can set priority 1, if less important then 2 and then subsequently",
        "controlType": "select",
        "type": "number",
        "seq": 3,
        "validators": {
          "required": true
        },
        "options": [
          {
            "label": "1",
            "value": 1
          },
          {
            "label": "2",
            "value": 2
          },
          {
            "label": "3",
            "value": 3
          },
          {
            "label": "4",
            "value": 4
          }
        ]
      },
      {
        "key": "monitorIframe",
        "value": false,
        "description": "It is used to capture adds data for netvision replay.",
        "colspan": 3,
        "label": "Monitor Iframe",
        "controlType": "toggle",
        "type": "boolean",
        "seq": 13
      },
      {
        "key": "wpdEvent",
        "value": false,
        "colspan": 3,
        "label": "WPD Event",
        "description": "Turn on to get notified if web page is distorted.",
        "controlType": "toggle",
        "type": "boolean",
        "seq": 13
      },
      {
        "key": "logNDSessionAlways",
        "value": false,
        "colspan": 3,
        "label": "Log NDSession",
        "description": "To get NetDiagnostic information on each NV Page.",
        "controlType": "toggle",
        "type": "boolean",
        "seq": 13
      },
      {
        "key": "visitorInfo",
        "value": false,
        "colspan": 3,
        "label": "Visitor Information",
        "description": "To get the visitor information traversed on same browser using CavVI cookie ",
        "controlType": "toggle",
        "type": "boolean",
        "seq": 13
      },
      {
        "key": "visitorExpiryTime",
        "value": 2592000,
        "colspan": 3,
        "label": "visitor Expiry Time ",
        "description": "Expiry time for the CavVI cookie responsible for tracking visitor information",
        "controlType": "input",
        "unit": "seconds",
        "type": "number",
        "seq": 9,
        "validators": {
          "required": true
        }
      },
      {
        "key": "uaCaptureResource",
        "value": false,
        "colspan": 3,
        "label": "Capture Resource Activity",
        "description": "uaCaptureResource is for recording resources too in case of usertiming capture just to prove that these particular resources are coming in between that call If Turn ON",
        "controlType": "toggle",
        "type": "boolean",
        "seq": 4
      },
      {
        "key": "blacklist_id",
        "value": [],
        "label": "Black List id",
        "description": "To blacklist a DOM Element using its id",
        "controlType": "chips",
        "type": "number",
        "colspan": 12,
        "seq": 4,
        "validators": {
          "required": true
        }
      },
      {
        "key": "dataFlushInterval",
        "value": 10,
        "colspan": 2,
        "label": "Data Flush Interval",
        "description": "Specify time to send the collected data on browser to nv server periodically",
        "controlType": "input",
        "units": "seconds",
        "type": "number",
        "seq": 5,
        "validators": {
          "min": 10,
          "max": 900,
          "required": true
        }
      },
      {
        "key": "loginIDLowerCase",
        "value": false,
        "colspan": 3,
        "label": "LoginidLowerCase",
        "description": "To get the login id of the user in lower case only",
        "controlType": "toggle",
        "type": "boolean",
        "seq": 7
      },
      {
        "key": "maxCookieSize",
        "value": 1024,
        "colspan": 3,
        "unit": "bytes",
        "label": "Cookie Size",
        "description": "Specify the maximum cookie size(in bytes) available on web page to show on NV",
        "controlType": "input",
        "type": "number",
        "seq": 6,
        "validators": {
          "min": 256,
          "max": 1024,
          "required": true
        }
      },
      {
        "key": "maxSessionDuration",
        "value": 7200,
        "unit": "seconds",
        "colspan": 3,
        "label": "Maximum Session duration Size",
        "description": "Specify max time a session can be run on a browser(in seconds)",
        "controlType": "input",
        "type": "number",
        "seq": 6,
        "validators": {
          "min": 60,
          "max": 28800,
          "required": true
        }
      },
      {
        "key": "encryptedElement",
        "value": [],
        "label": "Encrypt DOM Elements",
        "description": "Specify selectors of DOM elements which needs to be encrypted in NV Replay",
        "controlType": "chips",
        "seq": 4,
        "colspan": 12,
        "validators": {
          "required": true
        }
      },
      {
        "key": "eDataPattern",
        "value": [],
        "label": "Events Data pattern",
        "description": "Specify pattern for event's additional data to create a group. ",
        "controlType": "chips",
        "colspan": 12,
        "seq": 4,
        "validators": {
          "required": true
        }
      },
      {
        "key": "imgUrlPattern",
        "value": [],
        "label": "Image url pattern",
        "controlType": "chips",
        "seq": 4,
        "description": "specify pattern for image urls needed to measure the perceived render time.",
        "colspan": 12,
        "validators": {
          "required": true
        }
      },
      {
        "key": "enableCssSelector",
        "value": true,
        "colspan": 3,
        "label": "Enable Css Selector",
        "description": "It will return the css selectors of the DOM Element in useractions.",
        "controlType": "toggle",
        "type": "boolean",
        "seq": 7
      },
      {
        "key": "messageVersion",
        "value": 0,
        "colspan": 3,
        "label": "Message Version",
        "description": "This keyword is used to  get the json type content in the payload of each post request of NV. Value should be in the format of Plain Text/JSON.",
        "controlType": "select",
        "type": "number",
        "options": [
          {
            "label": "Plain Text",
            "value": 0
          },
          {
            "label": "JSON",
            "value": 1
          }
        ],
        "seq": 7,
        "validators": {
          "required": true
        }
      },
      {
        "key": "protocolVersion",
        "value": 1,
        "colspan": 3,
        "label": "Protocol Version",
        "description": "Protocol version varies according to the application type. Web = 1, Mobile SDK = 200",
        "controlType": "select",
        "type": "number",
        "readOnly": true,
        "seq": 9,
        "options": [
          {
            "label": "Web",
            "value": 1
          },
          {
            "label": "SDK",
            "value": 200
          }
        ],
        "validators": {
          "required": true
        }
      },
      {
        "key": "filterBotSession",
        "value": false,
        "colspan": 3,
        "label": "filterBotSession",
        "description": "NV will not record bot sessions if turned on.",
        "controlType": "toggle",
        "type": "boolean",
        "seq": 7
      },
      {
        "key": "JCP_stats",
        "value": false,
        "colspan": 3,
        "label": "Store Stats",
        "description": "if JCP StoreStats is enabled then we look for a cookie DPReferralUser and pick the store info from there",
        "controlType": "toggle",
        "type": "boolean",
        "seq": 10
      },
      {
        "key": "sessionExpiry",
        "value": 1800,
        "colspan": 3,
        "unit": "seconds",
        "label": "Session Expiry time",
        "description": "sessionExpiry exists in config for mentioning the duration of CavNVC cookie",
        "controlType": "input",
        "type": "number",
        "seq": 4,
        "validators": {
          "min": 60,
          "max": 7200,
          "required": true
        }
      },
      {
        "key": "rsaEncryption",
        "value": false,
        "description": "Use of private key file after enabling this feature",
        "colspan": 3,
        "label": "RSA Encryption",
        "controlType": "toggle",
        "type": "boolean",
        "seq": 11
      },
      {
        "key": "cookieLess",
        "value": false,
        "colspan": 3,
        "description": "Turn it on to use cookie less support of Netvision. Works using localStorage.",
        "label": "Cookie Less Tracking",
        "controlType": "toggle",
        "type": "boolean",
        "seq": 11
      },
      {
        "key": "blacklistCookies",
        "value": [],
        "label": "Black List Cookies",
        "description": "Specify cookies which does not want to be recorded in NV",
        "controlType": "chips",
        "type": "text",
        "seq": 12,
        "colspan": 12,
        "validators": {
          "required": true
        }
      },
      {
        "key": "whitelistCookies",
        "value": [],
        "label": "White List Cookies",
        "description": "Specify cookies which should always be captured in NV",
        "controlType": "chips",
        "seq": 8,
        "colspan": 12,
        "validators": {
          "required": true
        }
      },
      {
        "key": "remoteConfig",
        "value": false,
        "colspan": 3,
        "description": "Enable it if using another  config (remotely) at client side ",
        "label": "Remote Config Mode",
        "controlType": "toggle",
        "type": "boolean",
        "seq": 13
      },
      {
        "key": "resourceTiming",
        "value": true,
        "colspan": 3,
        "label": "Resource Timing Mode",
        "description": "Turn On to Capture  all the  resource/domain data ",
        "controlType": "toggle",
        "type": "boolean",
        "seq": 14
      },
      {
        "key": "ndHeader",
        "value": "X-CavNV",
        "colspan": 3,
        "label": "Header",
        "description": "Specify ND Header to capture the ND information of Ajax calls",
        "controlType": "input",
        "type": "text",
        "seq": 1,
        "validators": {
          "required": true
        }
      },
      {
        "key": "unloadLC",
        "value": false,
        "colspan": 3,
        "label": "Last Click Based Unload",
        "description": "Unload time will be based on the user's last click if turned on",
        "controlType": "toggle",
        "type": "boolean",
        "seq": 14
      },
      {
        "key": "customMetrics",
        "value": [],
        "colspan": 12,
        "label": "Custom Metrics",
        "description": "Specify custom data to be captured in NV",
        "controlType": "jsonarray",
        "readonly": true,
        "required": true,
        "seq": 13,
        "fields": [
          {
            "key": "name",
            "value": "",
            "colspan": 3,
            "label": "Name",
            "description": "Name of custom metric",
            "controlType": "input",
            "type": "text",
            "dbtable": "nvcustommetricsmetadatatable",
            "dbcolumn": "name"
          },
          {
            "key": "id",
            "value": -1,
            "colspan": 3,
            "label": "Id",
            "description": "Id of custom metric",
            "controlType": "input",
            "type": "number",
            "dbtable": "nvcustommetricsmetadatatable",
            "dbcolumn": "id"
          },
          {
            "key": "type",
            "value": "text",
            "colspan": 3,
            "label": "Type",
            "description": "Type of custom metric",
            "controlType": "input",
            "type": "text",
            "dbtable": "nvcustommetricsmetadatatable",
            "dbcolumn": "type",
            "dbvaluemap": {
              "0": "text",
              "1": "number",
              "2": "double",
              "3": "json"
            }
          },
          {
            "key": "encode",
            "value": 0,
            "colspan": 3,
            "label": "Encode Flag",
            "description": "Encode flag of custom metric",
            "controlType": "input",
            "type": "number",
            "dbtable": "nvcustommetricsmetadatatable",
            "dbcolumn": "encryptflag"
          }
        ]
      },
      {
        "key": "pageFilter",
        "value": {},
        "label": "Page Filter Value",
        "description": "Filter pages in NV according to the percentages specified",
        "controlType": "json",
        "required": true,
        "seq": 15,
        "fields": [
          {
            "key": "pctA",
            "value": 100,
            "label": "Filter(%) for All",
            "description": "Filter percentage for all the pages",
            "controlType": "slider",
            "type": "number",
            "colspan": 3,
            "required": true,
            "validators": {
              "min": 5,
              "max": 100
            }
          },
          {
            "key": "pctU",
            "value": 100,
            "label": "Filter(%) for Unknown Pages",
            "description": "Filter percentage for Unknown pages",
            "controlType": "slider",
            "type": "number",
            "required": true,
            "colspan": 3,
            "validators": {
              "min": 5,
              "max": 100
            }
          },
          {
            "key": "o",
            "value": [],
            "label": "Page specific filter",
            "description": "Page specific filter",
            "controlType": "jsonarray",
            "fields": [
              {
                "key": "pi",
                "value": "",
                "label": "Pages",
                "controlType": "multiselect",
                "multiple": "true",
                "delimiter": ",",
                "allvalue": "-1",
                "type": "text",
                "options": "Pages"
              },
              {
                "key": "pct",
                "value": 100,
                "label": "Filter(%)",
                "description": "Filter percentage for specific pages",
                "controlType": "slider",
                "type": "number",
                "required": true,
                "validators": {
                  "min": 5,
                  "max": 100
                }
              }
            ]
          }
        ]
      },
      {
        "key": "sessionFilter",
        "value": {},
        "label": "Session Filter Value",
        "description": "Filter sessions in NV according to the percentages and conditions specified",
        "controlType": "json",
        "required": true,
        "seq": 15,
        "fields": [
          {
            "key": "spct",
            "value": 100,
            "label": "Session Filter(%)",
            "description": "Filter percentage for Sessions",
            "controlType": "slider",
            "type": "number",
            "validators": {
              "min": 5,
              "required": true,
              "max": 100
            }
          },
          {
            "key": "bpct",
            "value": 100,
            "label": "Browse State Session Filter(%)",
            "description": "Filter percentage for Browse State Sessions",
            "controlType": "slider",
            "type": "number",
            "required": true,
            "validators": {
              "min": 5,
              "max": 100,
              "required": true
            }
          },
          {
            "key": "Bpct",
            "value": 100,
            "label": "Buyer State Session Filter(%)",
            "description": "Filter percentage for Buyer State Sessions",
            "controlType": "slider",
            "type": "number",
            "validators": {
              "min": 5,
              "max": 100,
              "required": true
            }
          }
        ]
      },
      {
        "key": "sessionFlags",
        "value": [],
        "label": "Session Flag",
        "description": "Add flags to store custom information of website (For internal use like callbacks)",
        "controlType": "chips",
        "type": "text",
        "seq": 15,
        "colspan": 12,
        "validators": {
          "required": true
        }
      }
    ]
  },
  {
    "formName": "CONFIG",
    "key": "CONFIG",
    "description": "Schema data for config",
    "fields": [
      {
        "key": "pageUrlValues",
        "value": [],
        "label": "Page Entries",
        "controlType": "jsonarray",
        "description": "Page Entries",
        "readonly": true,
        "required": true,
        "fields": [
          {
            "key": "s",
            "label": "Page Id",
            "description": "",
            "value": -1,
            "controlType": "input",
            "type": "number",
            "dbtable": "nvpagemetadatatable",
            "dbcolumn": "pageid",
            "readOnly": true
          },
          {
            "key": "c",
            "label": "URL Pattern",
            "description": "",
            "value": -1,
            "controlType": "input",
            "type": "text",
            "dbtable": "nvpagemetadatatable",
            "dbcolumn": "pattern",
            "readOnly": true
          },
          {
            "key": "t",
            "label": "URL Pattern Type",
            "description": "",
            "value": "",
            "controlType": "input",
            "type": "number",
            "dbtable": "nvpagemetadatatable",
            "dbcolumn": "pagenamemethod",
            "readOnly": true
          },
          {
            "key": "cu",
            "label": "Complete URL Flag",
            "description": "",
            "value": -1,
            "controlType": "toggle",
            "type": "boolean",
            "dbtable": "nvpagemetadatatable",
            "dbcolumn": "completeurlflag",
            "readOnly": true
          }
        ]
      }
    ]
  },
  {
    "formName": "USERACTION",
    "key": "USERACTION",
    "description": "It used to capture all the information when user click on any web page",
    "fields": [
      {
        "key": "enabled",
        "value": false,
        "description": "Turn on to cature user activity of user on app",
        "label": "Enabled",
        "controlType": "toggle",
        "type": "boolean",
        "seq": 0
      },
      {
        "key": "autoFillObserver",
        "controlType": "json",
        "label": "AutoFillObserver",
        "seq": 1,
        "fields": [
          {
            "key": "enabled",
            "value": false,
            "description": " Turn On to monitor the auto filled in input fields of web app ",
            "label": "Enabled",
            "controlType": "toggle",
            "type": "boolean",
            "seq": 0
          },
          {
            "key": "frequency",
            "value": 500,
            "label": "Frequency",
            "controlType": "input",
            "colspan": 2,
            "type": "number",
            "description": "We have to mention the frequency in useraction requests.",
            "unit": "msec",
            "required": true,
            "seq": 0,
            "validators": {
              "min": 100,
              "max": 10000,
              "required": true
            }
          }
        ]
      }
    ]
  },
  {
    "formName": "AjaxMonitor",
    "key": "AjaxMonitor",
    "description": "It is used to get the details of AJAX requests going in the application",
    "fields": [
      {
        "key": "enabled",
        "value": true,
        "description": "Turn on to get the details of AJAX requests going in the application",
        "label": "Enabled",
        "controlType": "toggle",
        "type": "boolean",
        "seq": 0
      },
      {
        "key": "logFailedAjax",
        "value": true,
        "description": "To capture the failed xhr of an ajax request",
        "colspan": 3,
        "label": "LogFailedAjax",
        "controlType": "toggle",
        "seq": 0
      },
      {
        "key": "captureCrossDomain",
        "value": false,
        "colspan": 3,
        "label": "Capture Cross Domain",
        "description": "To capture the cross domain in ajax request.",
        "controlType": "toggle",
        "seq": 1
      },
      {
        "key": "captureHeader",
        "value": false,
        "colspan": 3,
        "description": "To capture the header in ajax request.",
        "label": "Capture Header",
        "controlType": "toggle",
        "seq": 2
      },
      {
        "key": "capturePostData",
        "value": false,
        "colspan": 3,
        "label": "Capture Post Data",
        "controlType": "toggle",
        "description": "To capture the post data in ajax request.",
        "seq": 3
      },
      {
        "key": "captureResponse",
        "value": false,
        "colspan": 3,
        "label": "Capture Response",
        "description": "To capture the response in ajax request.",
        "controlType": "toggle",
        "seq": 4
      },
      {
        "key": "filters",
        "label": "Filter Entries",
        "controlType": "json",
        "fields": [
          {
            "key": "mode",
            "label": "Mode",
            "colspan": 3,
            "description": "Blacklist- (If we select blacklist we cannot see any request in XHR calls) AND Whitelist- (If we select whitelist we can see the request in XHR calls)",
            "required": true,
            "controlType": "select",
            "type": "text",
            "validators": {
              "required": true
            },
            "options": [
              {
                "label": "Blacklist",
                "value": "blacklist"
              },
              {
                "label": "Whitelist",
                "value": "whitelist"
              }
            ]
          },
          {
            "key": "entry",
            "label": "Entries",
            "value": [],
            "controlType": "jsonarray",
            "fields": [
              {
                "key": "domain",
                "label": "Domain",
                "description": "Full or partial name of the domain.",
                "value": "",
                "controlType": "input",
                "colspan": 3,
                "type": "text"
              },
              {
                "key": "domain_regex",
                "label": "Domain Pattern",
                "description": "Regular expression for domain name",
                "value": "",
                "colspan": 3,
                "controlType": "input",
                "type": "text"
              },
              {
                "key": "path",
                "label": "Path",
                "controlType": "input",
                "description": "Full or partial Path.",
                "value": "",
                "colspan": 3,
                "type": "text"
              },
              {
                "key": "path_regex",
                "label": "Path Pattern",
                "controlType": "input",
                "description": "Regular expression matching Path.",
                "value": "",
                "colspan": 3,
                "type": "text"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "formName": "DOMWATCHER2",
    "key": "DOMWATCHER2",
    "description": "Plugin capture dom changes.",
    "fields": [
      {
        "key": "enabled",
        "label": "Enabled",
        "description": "After Enable it is used to capture dom-watcher data on nv server",
        "controlType": "toggle",
        "value": true,
        "type": "boolean",
        "seq": 0
      },
      {
        "key": "compressDomchanges",
        "label": "Compress Domchanges",
        "controlType": "toggle",
        "description": "This keyword is used to capture the dom changes in dom requests",
        "value": true,
        "colspan": 3,
        "seq": 0
      },
      {
        "key": "filterUnexpected",
        "label": "Filter Unexpected",
        "controlType": "toggle",
        "colspan": 3,
        "description": "This keyword is used to capture the dom changes in dom requests",
        "value": true,
        "seq": 1
      },
      {
        "key": "idleTime",
        "label": "Idle state timeout",
        "description": "Plugin will record XHR calls and clicks. If there is no xhr call or user actions for this timeout value then state will be changed to Unexpected Changes and All the dom changes during that state will be discarded. ",
        "controlType": "input",
        "type": "number",
        "colspan": 2,
        "value": 2000,
        "unit": "msec",
        "seq": 0,
        "validators": {
          "min": 500,
          "max": 60000
        }
      },
      {
        "key": "filterElement",
        "label": "Filter Elements",
        "description": "This is used to filter all the elements in dom changes in dom requests. There are multiple entries. Filter Elements i.e Add, Edit, Delete.",
        "controlType": "jsonarray",
        "value": [],
        "seq": 2,
        "options": "2",
        "fields": [
          {
            "key": "aChange",
            "label": "Attribute Change",
            "controlType": "toggle",
            "value": false,
            "seq": 0
          },
          {
            "key": "element",
            "label": "Element(xpath)",
            "controlType": "input",
            "type": "text",
            "value": "",
            "seq": 1
          },
          {
            "key": "pageid",
            "label": "Pages",
            "controlType": "multiselect",
            "multiple": true,
            "allvalue": "-1",
            "optional": "true",
            "value": "",
            "type": "text",
            "delimiter": ",",
            "options": "Pages"
          }
        ]
      },
      {
        "key": "XHRModule",
        "label": "XHR Module",
        "controlType": "json",
        "description": "",
        "seq": 3,
        "fields": [
          {
            "key": "enabled",
            "label": "Enable",
            "description": "If enable is true then ajax or xhr records will be captured.",
            "controlType": "toggle",
            "value": false,
            "seq": 0
          },
          {
            "key": "options",
            "label": "Options",
            "description": "Options for XHR Module",
            "controlType": "json",
            "fields": [
              {
                "key": "logFailedAjax",
                "value": true,
                "description": "To capture the failed xhr of an ajax request.",
                "colspan": 3,
                "label": "LogFailedAjax",
                "controlType": "toggle",
                "seq": 0
              },
              {
                "key": "captureCrossDomain",
                "value": false,
                "description": "To capture the cross domain in dom request . If it is enabled we can capture otherwise we can not.",
                "colspan": 3,
                "label": "Capture Cross Domain",
                "controlType": "toggle",
                "seq": 1
              },
              {
                "key": "captureHeader",
                "value": false,
                "colspan": 3,
                "description": "To capture the failed xhr of an ajax request.",
                "label": "Capture Header",
                "controlType": "toggle",
                "seq": 2
              },
              {
                "key": "capturePostData",
                "value": false,
                "description": "To capture the post data in ajax request.",
                "colspan": 3,
                "label": "Capture Post Data",
                "controlType": "toggle",
                "seq": 3
              },
              {
                "key": "captureResponse",
                "value": false,
                "colspan": 3,
                "description": "To capture the response in ajax request.",
                "label": "Capture Response",
                "controlType": "toggle",
                "seq": 4
              },
              {
                "key": "filters",
                "label": "Filter Entries",
                "controlType": "json",
                "required": true,
                "fields": [
                  {
                    "key": "mode",
                    "label": "Mode",
                    "colspan": 3,
                    "description": "Blacklist- (If we select blacklist we cannot see any request in XHR calls.) AND  Whitelist- (If we select whitelist we can see the request in XHR calls.)",
                    "required": true,
                    "controlType": "select",
                    "type": "text",
                    "options": [
                      {
                        "label": "Blacklist",
                        "value": "blacklist"
                      },
                      {
                        "label": "Whitelist",
                        "value": "whitelist"
                      }
                    ]
                  },
                  {
                    "key": "entry",
                    "label": "Entries",
                    "value": [],
                    "controlType": "jsonarray",
                    "fields": [
                      {
                        "key": "domain",
                        "label": "Domain",
                        "description": "Full or partial name of the domain.",
                        "value": "",
                        "colspan": 3,
                        "required": false,
                        "controlType": "input",
                        "type": "text",
                        "validators": {
                          "required": false
                        }
                      },
                      {
                        "key": "domain_regex",
                        "label": "Domain Pattern",
                        "description": "Regular expression for domain name",
                        "value": "",
                        "colspan": 3,
                        "required": false,
                        "controlType": "input",
                        "type": "text",
                        "validators": {
                          "required": false
                        }
                      },
                      {
                        "key": "path",
                        "label": "Path",
                        "description": "Full or partial Path.",
                        "value": "",
                        "colspan": 3,
                        "controlType": "input",
                        "required": false,
                        "type": "text",
                        "validators": {
                          "required": false
                        }
                      },
                      {
                        "key": "path_regex",
                        "label": "Path Pattern",
                        "description": "Regular expression matching Path.",
                        "value": "",
                        "colspan": 3,
                        "required": false,
                        "controlType": "input",
                        "type": "text",
                        "validators": {
                          "required": false
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "formName": "CHECKPOINT",
    "key": "CHECKPOINT",
    "description": "CheckPoints are used to match a certain string which is displayed on the site on the occurence of an event such as Coupon expired,Item out of Stock,Session Expired etc. The Checkpoints are mapped with Events. When Strings is matched,associated Event name is displayed in Session",
    "fields": [
      {
        "key": "enabled",
        "value": true,
        "description": "Turn On to caputure these data during session recording",
        "label": "Enabled",
        "controlType": "toggle",
        "seq": 0
      },
      {
        "key": "entry",
        "label": "Entries",
        "value": [],
        "controlType": "jsonarray",
        "description": "Checkpoint Entries",
        "readonly": true,
        "fields": [
          {
            "key": "name",
            "label": "Name",
            "description": "Specify name of Checkpoint",
            "value": -1,
            "controlType": "input",
            "type": "text",
            "dbtable": "nvcheckpointtable",
            "dbcolumn": "cpname",
            "readOnly": true
          },
          {
            "key": "event",
            "label": "Event Name",
            "description": "Name of event related to checkpoint",
            "value": -1,
            "controlType": "input",
            "type": "text",
            "dbtable": "nvcheckpointtable",
            "dbcolumn": "eventname",
            "readOnly": true
          },
          {
            "key": "pages",
            "label": "Pages",
            "description": "",
            "value": -1,
            "controlType": "input",
            "type": "text",
            "dbtable": "nvcheckpointtable",
            "dbcolumn": "pages",
            "readOnly": true
          },
          {
            "key": "scope",
            "label": "Scope",
            "description": "",
            "value": -1,
            "controlType": "input",
            "type": "number",
            "dbtable": "nvcheckpointtable",
            "dbcolumn": "scope",
            "readOnly": true
          },
          {
            "key": "selector",
            "label": "Selector",
            "description": "",
            "value": -1,
            "controlType": "input",
            "type": "text",
            "dbtable": "nvcheckpointtable",
            "dbcolumn": "selector",
            "readOnly": true
          },
          {
            "key": "fail",
            "label": "Fail",
            "description": "",
            "value": -1,
            "controlType": "input",
            "type": "number",
            "dbtable": "nvcheckpointtable",
            "dbcolumn": "fail",
            "readOnly": true
          },
          {
            "key": "mode",
            "label": "Mode",
            "description": "",
            "value": -1,
            "controlType": "input",
            "type": "number",
            "dbtable": "nvcheckpointtable",
            "dbcolumn": "searchmode",
            "readOnly": true
          },
          {
            "key": "arg1",
            "label": "Arg1",
            "description": "Argument 1",
            "controlType": "json",
            "required": true,
            "dbtable": "nvcheckpointtable",
            "dbcolumn": "cpid",
            "jointable": "nvcheckpointtable",
            "joincolumn": "cpid",
            "seq": 0,
            "readOnly": true,
            "fields": [
              {
                "key": "text",
                "label": "Text",
                "controlType": "input",
                "type": "text",
                "value": -1,
                "dbtable": "nvcheckpointtable",
                "dbcolumn": "searchtext",
                "seq": 0
              },
              {
                "key": "searchregexp",
                "label": "Regex",
                "controlType": "input",
                "type": "text",
                "value": -1,
                "dbtable": "nvcheckpointtable",
                "dbcolumn": "searchregexp",
                "seq": 0
              },
              {
                "key": "searchic",
                "label": "IC",
                "controlType": "input",
                "type": "text",
                "value": -1,
                "dbtable": "nvcheckpointtable",
                "dbcolumn": "searchic",
                "seq": 0
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "formName": "ResourceTimingFilter",
    "key": "resourceTimingFilter",
    "description": "Filter resources on the basis of percentage and onload time if enabled",
    "fields": [
      {
        "key": "mode",
        "value": true,
        "description": "Turn On To Filter resources on the basis of percentage and onload time",
        "label": "Mode",
        "controlType": "toggle",
        "seq": 0
      },
      {
        "key": "pct",
        "value": 10,
        "label": "Percentage",
        "description": "To capture the percentage of resources in the timing request according to the requirement.",
        "controlType": "slider",
        "colspan": 3,
        "type": "number",
        "seq": 1,
        "validators": {
          "required": true
        }
      },
      {
        "key": "maxPageLoadTime",
        "value": 10000,
        "description": "To capture the maximum page load time in timing request.",
        "label": "Max PageLoad Time",
        "controlType": "input",
        "colspan": 3,
        "type": "number",
        "unit": "msec",
        "seq": 2,
        "validators": {
          "required": true
        }
      }
    ]
  },
  {
    "formName": "OCXFilter",
    "key": "ocxFilter",
    "description": "Filter OCX data ie useractions/pagedump/domwatchers if enabled and session is not interesting",
    "fields": [
      {
        "key": "enabled",
        "value": false,
        "description": "Turn on on enable OCX data filtering on pages.",
        "label": "Enabled",
        "colspan": 3,
        "controlType": "toggle",
        "seq": 0
      },
      {
        "key": "pct",
        "value": 50,
        "description": "This will specify the applicability of OCXFilter on pages",
        "label": "PCT",
        "colspan": 3,
        "controlType": "slider",
        "required": true,
        "type": "number",
        "seq": 0,
        "validators": {
          "min": 1,
          "max": 100,
          "required": true
        }
      },
      {
        "key": "maxPage",
        "value": 3,
        "colspan": 2,
        "description": "Specify maximum number of pages after which you want the OCX data to be flushed for session",
        "label": "Maximum Page",
        "controlType": "input",
        "type": "number",
        "seq": 0,
        "validators": {
          "required": true
        }
      },
      {
        "key": "batchSize",
        "value": 0,
        "colspan": 2,
        "description": "It Sends the request's data in the specified batch size",
        "label": "Batch Size",
        "controlType": "input",
        "type": "number",
        "seq": 0,
        "validators": {
          "required": true
        }
      },
      {
        "key": "dumpState",
        "value": [],
        "label": "Dump State",
        "description": "Specify state ie BROWSER_STATE:1, SESSION_STATE:2, BUYER_STATE:3",
        "controlType": "chips",
        "seq": 0,
        "colspan": 12,
        "validators": {
          "required": true
        }
      }
    ]
  },
  {
    "formName": "SPA",
    "key": "SPA",
    "description": "It Used to monitor single page application, based on angular/history framework",
    "fields": [
      {
        "key": "enabled",
        "value": false,
        "description": "Turn on to monitor single page application, based on angular/history framework",
        "label": "Enabled",
        "controlType": "toggle",
        "seq": 0
      },
      {
        "key": "framework",
        "value": "history",
        "label": "Framework",
        "description": "To capture the SPA framework.",
        "controlType": "multiselect",
        "type": "text",
        "options": [
          {
            "label": "angular",
            "value": "angular"
          },
          {
            "label": "history",
            "value": "history"
          },
          {
            "label": "hashchange",
            "value": "hashchange"
          }
        ]
      },
      {
        "key": "ignoreFrame",
        "value": true,
        "label": "Ignore Frame",
        "description": "Ignore frame load while calculation of onload for soft navigated pages",
        "controlType": "toggle",
        "type": "boolean"
      },
      {
        "key": "ignoreImg",
        "value": false,
        "label": "Ignore Image",
        "description": "Ignore image load while calculation of onload for soft navigated pages",
        "controlType": "toggle",
        "type": "boolean"
      },
      {
        "key": "XHRModule",
        "label": "XHR Module",
        "controlType": "json",
        "description": "XHR Module for calculation of load time of soft transition. ",
        "fields": [
          {
            "key": "enabled",
            "value": true,
            "type": "boolean",
            "controlType": "toggle",
            "label": "Enable",
            "colspan": 3
          },
          {
            "key": "options",
            "controlType": "json",
            "label": "Options",
            "description": "Configuration of XHRModule",
            "fields": [
              {
                "key": "logFailedAjax",
                "description": "To capture the failed xhr of an SPA request.",
                "value": true,
                "colspan": 3,
                "label": "LogFailedAjax",
                "controlType": "toggle",
                "seq": 0
              },
              {
                "key": "captureCrossDomain",
                "value": false,
                "colspan": 3,
                "label": "Capture Cross Domain",
                "description": "To capture the cross domain in SPA request.",
                "controlType": "toggle",
                "seq": 1
              },
              {
                "key": "captureHeader",
                "value": false,
                "colspan": 3,
                "description": "To capture the failed xhr of an SPA request.",
                "label": "Capture Header",
                "controlType": "toggle",
                "seq": 2
              },
              {
                "key": "capturePostData",
                "value": false,
                "colspan": 3,
                "label": "Capture Post Data",
                "description": "To capture the post data in SPA request.",
                "controlType": "toggle",
                "seq": 3
              },
              {
                "key": "captureResponse",
                "value": false,
                "colspan": 3,
                "description": "To capture the response in SPA request.",
                "label": "Capture Respose",
                "controlType": "toggle",
                "seq": 4
              },
              {
                "key": "filters",
                "label": "Filter Entries",
                "controlType": "json",
                "required": true,
                "fields": [
                  {
                    "key": "mode",
                    "label": "Mode",
                    "colspan": 3,
                    "description": "Blacklist- If we select blacklist we cannot see any request in XHR calls.Whitelist- If we select whitelist we can see the request in XHR calls.",
                    "controlType": "select",
                    "type": "text",
                    "validators": {
                      "required": true
                    },
                    "options": [
                      {
                        "label": "Blacklist",
                        "value": "blacklist"
                      },
                      {
                        "label": "Whitelist",
                        "value": "whitelist"
                      }
                    ]
                  },
                  {
                    "key": "entry",
                    "label": "Entries",
                    "value": [],
                    "controlType": "jsonarray",
                    "fields": [
                      {
                        "key": "domain",
                        "label": "Domain",
                        "description": "Full or partial name of the domain.",
                        "value": "",
                        "controlType": "input",
                        "colspan": 3,
                        "type": "text",
                        "validators": {
                          "required": false
                        }
                      },
                      {
                        "key": "domain_regex",
                        "label": "Domain Pattern",
                        "description": "Regular expression for domain name",
                        "value": "",
                        "colspan": 3,
                        "required": false,
                        "controlType": "input",
                        "type": "text",
                        "validaton": {
                          "required": false
                        }
                      },
                      {
                        "key": "path",
                        "label": "Path",
                        "description": "Full or partial Path.",
                        "value": "",
                        "colspan": 3,
                        "required": false,
                        "controlType": "input",
                        "type": "text",
                        "validaton": {
                          "required": false
                        }
                      },
                      {
                        "key": "path_regex",
                        "label": "Path Pattern",
                        "description": "Regular expression matching Path.",
                        "value": "",
                        "colspan": 3,
                        "type": "text",
                        "controlType": "input",
                        "validators": {
                          "required": false
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "formName": "ErrorTracing",
    "key": "ErrorTracing",
    "description": "Js Errors of application will be captured by this feature",
    "fields": [
      {
        "key": "enabled",
        "description": "Turn On to capture the Js Errors of application",
        "value": true,
        "label": "Enabled",
        "controlType": "toggle",
        "seq": 0
      },
      {
        "key": "triggerEvent",
        "value": true,
        "label": "Trigger Event",
        "colspan": 3,
        "controlType": "toggle",
        "type": "boolean",
        "decription": "Trigger JSError event on js error",
        "seq": 0
      },
      {
        "key": "logStackTrace",
        "value": true,
        "description": "It is used to log stack strace in case of any failure",
        "colspan": 3,
        "label": "Log Stack Trace",
        "controlType": "toggle",
        "decription": "Enable to log stack trace when js error occures",
        "seq": 0
      },
      {
        "key": "filterCrossOriginError",
        "value": true,
        "colspan": 3,
        "label": "Filter Cross origin JS Error",
        "description": "This mode will disable cross origin js error capturing.",
        "controlType": "toggle",
        "seq": 0
      },
      {
        "key": "maxErrorPerPage",
        "value": 5,
        "description": "It define maximum error which can occure on single page.",
        "colspan": 2,
        "label": "Maximum Error Per Page",
        "controlType": "input",
        "type": "number",
        "seq": 0,
        "validators": {
          "required": true
        }
      },
      {
        "key": "maxStackFrame",
        "value": 10,
        "description": "Max stack size to be captured for JS Error",
        "colspan": 2,
        "label": "Max Stack Frame",
        "controlType": "input",
        "type": "number",
        "seq": 0,
        "validators": {
          "min": 5,
          "required": true,
          "max": 10000
        }
      },
      {
        "key": "filter",
        "controlType": "json",
        "label": "Filter",
        "decription": "Filtering will enable to capture JS error for given percentage of pages only. ",
        "seq": 1,
        "fields": [
          {
            "key": "pct",
            "value": 100,
            "label": "Filter(%)",
            "controlType": "slider",
            "type": "number",
            "seq": 8,
            "validators": {
              "min": 10,
              "required": true,
              "max": 100
            }
          }
        ]
      }
    ]
  },
  {
    "formName": "UserTiming",
    "key": "UserTiming",
    "description": "Usertiming interface captures the mark and measure events of the browser, configured by the application's developer at some point",
    "fields": [
      {
        "key": "enabled",
        "value": false,
        "description": "UserTiming is captured when the mode is enabled.",
        "label": "Enabled",
        "controlType": "toggle",
        "seq": 0
      }
    ]
  },
  {
    "formName": "ABTesting",
    "key": "ABTesting",
    "description": "A/B testing (sometimes called split testing) is comparing two versions of a web page to see which one performs better.",
    "fields": [
      {
        "key": "enabled",
        "value": false,
        "description": "Turn On To Capture The AB Testing data",
        "label": "Enabled",
        "controlType": "toggle",
        "seq": 0
      },
      {
        "key": "v",
        "label": "Variation",
        "controlType": "jsonarray",
        "value": [],
        "seq": 0,
        "readonly": true,
        "fields": [
          {
            "key": "i",
            "value": "",
            "label": "Variation ID",
            "controlType": "number",
            "type": "number",
            "dbtable": "nvvariationmetadatatable",
            "dbcolumn": "variationid",
            "readOnly": true,
            "seq": 1
          },
          {
            "key": "pi",
            "value": "",
            "label": "PageList",
            "controlType": "input",
            "type": "text",
            "dbtable": "nvvariationmetadatatable",
            "dbcolumn": "pagelist",
            "readOnly": true,
            "seq": 0
          },
          {
            "key": "pct",
            "value": 0,
            "label": "Traffic(%)",
            "description": "Traffic % for which this variation will be enabled.",
            "controlType": "input",
            "type": "number",
            "dbtable": "nvvariationmetadatatable",
            "dbcolumn": "traffic",
            "readOnly": true,
            "seq": 0
          },
          {
            "key": "url",
            "value": "",
            "label": "URL",
            "controlType": "input",
            "type": "text",
            "required": true,
            "dbtable": "nvvariationmetadatatable",
            "dbcolumn": "url",
            "seq": 0
          },
          {
            "key": "r",
            "label": "Variation Rule",
            "description": "Rule for variation",
            "controlType": "input",
            "dbtable": "nvvariationmetadatatable",
            "dbcolumn": "command",
            "type": "json",
            "colspan": 12
          },
          {
            "key": "g",
            "value": "",
            "label": "Variation Goal",
            "description": "Goal of Variation",
            "controlType": "json",
            "required": true,
            "dbtable": "nvvariationmetadatatable",
            "dbcolumn": "goalid",
            "jointable": "nvgoalmetadatatable",
            "joincolumn": "goalid",
            "seq": 0,
            "fields": [
              {
                "key": "type",
                "label": "Goal Type",
                "controlType": "input",
                "type": "text",
                "value": -1,
                "dbtable": "nvgoalmetadatatable",
                "dbcolumn": "type",
                "seq": 0
              },
              {
                "key": "mode",
                "label": "Mode",
                "controlType": "input",
                "type": "text",
                "value": -1,
                "dbtable": "nvgoalmetadatatable",
                "dbcolumn": "mode",
                "seq": 0
              },
              {
                "key": "v1",
                "label": "Argument 1",
                "controlType": "input",
                "type": "text",
                "value": "",
                "dbtable": "nvgoalmetadatatable",
                "dbcolumn": "value1",
                "seq": 0
              },
              {
                "key": "v2",
                "label": "Argument 2",
                "controlType": "input",
                "type": "text",
                "value": "",
                "dbtable": "nvgoalmetadatatable",
                "dbcolumn": "value2",
                "required": false,
                "seq": 0
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "formName": "EQueue",
    "key": "EQueue",
    "description": "This plugin will encode that data and will send as useraction record to NV Server",
    "fields": [
      {
        "key": "enabled",
        "value": false,
        "label": "Enabled",
        "description": "Turn on to capture the equeue request .",
        "controlType": "toggle",
        "seq": 0
      },
      {
        "key": "libraryPath",
        "value": "",
        "colspan": 3,
        "description": "Path of encryption library in EQueue Plugin If rsaEncryption is enabled",
        "label": "Library Path",
        "controlType": "input",
        "type": "text",
        "seq": 1,
        "validators": {
          "required": true
        }
      }
    ]
  },
  {
    "formName": "FEEDBACK",
    "key": "FEEDBACK",
    "description": "This plugin is used to capture the FeedBack Data",
    "fields": [
      {
        "key": "mode",
        "value": false,
        "label": "Enabled",
        "description": "Feedback request is captured when the mode is enabled.",
        "controlType": "toggle",
        "seq": 0
      },
      {
        "key": "feedbackPosition",
        "value": "bottom",
        "description": "Position of Send Feedback button on Web Application",
        "label": "feedbackPosition",
        "controlType": "select",
        "type": "text",
        "colspan": 3,
        "options": [
          {
            "label": "Bottom",
            "value": "bottom"
          },
          {
            "label": "Left",
            "value": "left"
          },
          {
            "label": "Right",
            "value": "right"
          },
          {
            "label": "Top",
            "value": "top"
          }
        ],
        "seq": 1,
        "validators": {
          "required": true
        }
      },
      {
        "key": "pluginfbjs_url",
        "value": "",
        "colspan": 12,
        "label": "Feedback Plugin URL",
        "description": "To specify the feedback plugin url in feedback form.",
        "controlType": "input",
        "type": "text",
        "validators": {
          "required": true,
          "pattern": "^(?:http(s)?:\\\/\\\/)?[\\\/\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:\/\/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$"
        },
        "seq": 1
      }
    ]
  },
  {
    "formName": "SCA",
    "key": "SCA",
    "description": "Secure client authentication",
    "fields": [
      {
        "key": "enabled",
        "value": false,
        "label": "Enabled",
        "description": "We can capture the client authentication records  when the mode is enabled",
        "controlType": "toggle",
        "seq": 0
      },
      {
        "key": "encryption",
        "value": false,
        "label": "Encryption",
        "description": " Used to encrypt the data.",
        "controlType": "toggle",
        "seq": 0
      }
    ]
  },
  {
    "formName": "Cross Origin",
    "key": "CrossOrigin",
    "description": "This plugin will allow to capture ocx data from multiple domain and merge them in one single session. It will load an intermediate iframe and will copy all the cookies to that iframe. ",
    "fields": [
      {
        "key": "enabled",
        "label": "Enabled",
        "description": "Turn On to capture ocx data from multiple domain",
        "controlType": "toggle",
        "value": false,
        "seq": 0
      },
      {
        "key": "group",
        "label": "Group",
        "description": "A Common name of all the origin for which sessions need to be merged. It should be same in configuraiton of all the origins. Eg. ToursGroup",
        "controlType": "input",
        "type": "text",
        "value": "",
        "colspan": 3,
        "validators": {
          "required": true
        }
      },
      {
        "key": "frame_url",
        "label": "Frame URL",
        "description": "URL of intermediate frame. It should be same for all the origins.",
        "controlType": "input",
        "type": "text",
        "colspan": 12,
        "value": "",
        "validators": {
          "required": true,
          "pattern": "^(?:http(s)?:\\\/\\\/)?[\\\/\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:\/\/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$"
        }
      }
    ]
  },
  {
    "formName": "FA",
    "key": "FA",
    "description": "Form analytics captures user involvment with the forms of web application.",
    "fields": [
      {
        "key": "enabled",
        "label": "Enabled",
        "description": "Turn On to Capture the Form Analytics Data",
        "controlType": "toggle",
        "value": false,
        "seq": 0
      }
    ]
  },
  {
    "formName": "Service Worker",
    "key": "SW",
    "description": "Schema for Service worker (A Service Worker is a script that your browser runs in the background)",
    "fields": [
      {
        "key": "enabled",
        "label": "Enabled",
        "controlType": "toggle",
        "description": "Turn On to use service worker for capturing NV information.A Service Worker is a script that your browser runs in the background",
        "value": false,
        "seq": 0
      },
      {
        "key": "frame_url",
        "value": "",
        "label": "Frame URL",
        "controlType": "input",
        "type": "text",
        "colspan": 12,
        "description": "Iframe url needed for installing service worker (For Ex--> //<nv-server>/nv/<client-id>/cavnv_sw_iframe.html)",
        "seq": 0,
        "validators": {
          "required": true,
          "pattern": "^(?:http(s)?:\\\/\\\/)?[\\\/\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:\/\/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$"
        }
      },
      {
        "key": "sw_url",
        "value": "",
        "label": "Service worker URL",
        "controlType": "input",
        "type": "text",
        "colspan": 12,
        "description": " Url of service worker file which has service worker's callbacks. (For Ex--> https://<nv-server>/nv/<client-id>/sw.js)",
        "seq": 0,
        "validators": {
          "required": true,
          "pattern": "^(?:http(s)?:\\\/\\\/)?[\\\/\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:\/\/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$"
        }
      }
    ]
  }
]
